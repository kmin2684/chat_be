receiving a new message from a newly created chat room 
	incoming via websocket 
	check if the message is from newly created room 
	update the current room state list


creating a new chat 
	send new message via web socket
	{memebers, chat_name, is_new_room, message}
	redirect to the room if successful 
	if is_new_room and message.sender == current user
		redirect to the room 


websocket 
	add authentication middleware 
	check database interaction
		try retrieving data
			get last message from the database
	
	group_add(logged_in_users)
	receive a message => add to the data base => find members that are logged in => send messages to active users in the room
	what channel group should i make? 
		logged_in_users vs every chat room 
		every chat room
			for every member in the chat room, get the channel name of logged in users
			edge cases	
				new room created
				leave a room 
		how to know if a user is logged in <= see if token exists
	
	receive message
		{room_id message}
	
	send message	
		{room_id message is_new_room}


implement logout
make registration page 

serializer formatting 
	input argument to specify request owner
	
	room [id, title, users, last_message]
	friends [user1, user2]
	user [id, username]

	how to put additional input argument to serializer
	how to put access current from serializer class 

	how to include fields from different models in serializers
		in this case, how to validate incoming data?


view login	
	if user is already logged in 
		send user information in json 
	if authentication valid
		send user information
	if authentication invalid
		send error message 


session based login might work

DRF Channels token authentication 
	registration https://medium.com/django-rest/django-rest-framework-login-and-register-user-fd91cf6029d5
	logout https://stackoverflow.com/questions/30739352/django-rest-framework-token-authentication-logout
	https://www.youtube.com/watch?v=5_hLC1QC_Vc
	https://stackoverflow.com/questions/4361173/http-headers-in-websockets-client-api/4361358#4361358
	https://stackoverflow.com/questions/43392889/how-do-you-authenticate-a-websocket-with-token-authentication-on-django-channels
	https://stackoverflow.com/questions/56671283/how-do-you-authenticate-a-websocket-connection-with-knox-token-authentication-on

input from router url 

change content based on viewport size (width)
	useeffect

powershell environment path problem 
	https://stackoverflow.com/questions/546583/why-is-the-powershell-environment-path-different-to-the-system-environment-path

do i need to use useeffect
	web socket connection 
how changing chatbox content work?

mdn react review
lama dev
conversation onclick useeffect

url for new chat 

possible problems with spa
add back and next button to new group form 
	instead eventlistener on back button, refresh new chat name and group state everytime loading a chat room or general area 

toggle between friend list and room list
load chat window on clicking a message 
close chat window on back button 


start with JS or React?
	HTML and CSS layout in JS
		design in components like fashion 
			</general>
				</friends>
				</rooms>
			</conversation>
			</create_new_group>
				</add_members>
				</add_title>
	state management with React

Channel_layer.groups
	active members = [{user: ,current_room: }]
	room1_active_members = []
		this is required to identify to whom the server needs to send message via websocket the moment the server receives a message


media query with react 
	</App>
		</general grid_left>
			</main>
				</friends>
				</rooms>
			</toggle>
		</chat grid_right>

	can I only mount one of the </general> and </chat> component on mobile mode and mount both on pc?
		just use CSS property "display" and change view mode based on the window width


	PC: 
		enter room:
			turn on </chat> (display: block)
		
		leave room:
			turn off </chat> (display: block)

		main view: empty window, chat
		side view: friends, group
		grid view

		CSS
			/app: grid
			/general: grid_left
			/chat: grid_right

	mobile:
		enter room:
			turn on </chat> 
				(display: block) or z index
				fill in </chat> with contents
			turn off </general> (display: none)
			fill in </chat> with contents

		leave room:
			turn off </chat> (display: block)
				remove children from contents
			turn on </general> (display: none)

		can i make SPA for mobile view even not when not restricted by PC mode consideration?

		main view: friends, group, chats 

		</general grid_left>
			</main>
				</friends>
				</rooms>
			</toggle>
		</chat grid_right>

		</chat> on </general> off and vice versa 

		CSS
			/app: block
			/general: block/none
			/chat: none/block

	change the width of the side window

	

routing

	</new chat form> has its own state management so that state refreshes navigating back and forth and the components remount
		</newchatform> has 4 views (select friends=> add group members=> add title=> temp_conversation)
		temp conversation page	
			redirect to </conversation>?
			submit message => receive new room info from server => client side redirection to /room (</conversation>)
				if there is no other way, I can just hide a <Link> and simulate clicking by JS

	prevent going back to new chat form from new chat room 
		do not change url for loading new chat form 
		force to always go to the general page 
			push state when joining the room 
			remove state when leaving the new chat form 
	links
		/
		/room
		/room/1
		/new_message
			/new_message/add_participants
			/new_message/add_participants/add_title
			/new_room

	/new_message containes 3 components
		</room>
		</add_participants>
		</add_title>


	test by directly typing in url and see if the client sends a request to the server
	routing is needed to maintain websocket connection when changing url 
	routing is not just about chainging css display setting. it works by mounting and unmounting components where as changing display setting still keeps all the components in the DOM.
		user props to send which view to turn on
			then things have to mount and unmount everytime...?

	layout
		<div className = "view1">
			<friends>
			<rooms>
			<toggle_bar>
		</div>
		<div className = "view2">
			<new_chat_form>
			<conversation>
		</div>

	<Router>
		<Switch>
			<Route exact path="/">
				<div className = "view1">
					<friends>
					<rooms>
					<toggle_bar>
				</div>
				<div className = "view2">
					<new_chat_form>
					<conversation>
				</div>
			</Route>
			<Route path = "/room">
				<div className = "view1">
					<friends>
					<rooms>
					<toggle_bar>
				</div>
				<div className = "view2">
					<conversation>
			</Route>
			<Route path = "/new_chat">
				<div className = "view1">
					<friends>
					<rooms>
					<toggle_bar>
				</div>
				<div className = "view2">
					<new_chat_form>
			</Route>
		</Swtich>
	</Router>


	https://stackoverflow.com/questions/27928372/react-router-urls-dont-work-when-refreshing-or-writing-manually
	it seems router works by choosing within <Switch>
	in my case, component within switch contains link 
		https://stackoverflow.com/questions/63709942/how-to-use-router-links-inside-switch?rq=1
		https://www.taniarascia.com/using-react-router-spa/

	routing for nested elements? can routing be applied on sibling components
		</general>
			</chat window>
		
		vs

		</general>
		</chat window>

	<Router>
		<div class="general">
			<ul>
				<li>

				</li>
			</ul>
		<div>

		<Link to="/">Home</Link>
		<Switch>
			<Route path="/about">
				<About />
			</Route>
		</Switch>


	</Router>


	<Router>
		<div class="general">
			<div class = "rooms">
				<Link to = "/room/1"> 
					room1
				</Link>
				<Link to = "/room/2"> 
					room2
				</Link>
			</div>
			<div class = "friends">
				<Link to = "/friend/1">
					friend1
				</Link>
			</div>
		</div>

		<Switch>
			<Route path="/room">
				<Room />
			</Route>
			<Route path="/friend">
				<friend />
			</Route>
		</Switch>
	</Router>

	switch within /chat components 
	directly typing in url (ex. room/1) vs clicking on the general page
		make a specifit response method on the server
			same response as general case +
			add the user to the room +
			send message 
		
			maybe just redirect to /

	Desktop version and url 
		no problem at all 
	routing is needed so that back button works
	does SPA work like routing?
		yes
	what if a user's current_location changes by navigating forward and backward?
		state management
			<div class="room_id">.innerhtml.onchange = update_current_room("current_room")
	creating a new group
		general => add members => add title => load chat window => send a chat => send a request to the server for creating a new group => server register the room and the message to the database => send the room id and message to active users in th room => routing issue.... (simulate cliking action for entering room) => reload the room 

	SPA
		https://stackoverflow.com/questions/25806608/how-to-detect-browser-back-button-event-cross-browser

websocket communication within group chat
	joins a room
		client
			notifies server
			receives messages 
			renders messages
		server
			add the user to the group
			change the read-count for all messages that hasn't been checked for the user
			if read count has changed, sends messages to all members present in the group 
	sends a messsage
		client
			notifies server
			receives messages
			renders messsages
		server
			add the message to the database
				assign read-count to the message based on the number of people in the room
				send the message to all active members in the room  
	
	leaves a room
		cases
			disconnected from web socket	
				log out
				close page
			enter general view
			joins another room 
		remove the user from the channel_group for the room
			keep track of current location of the user



 


when a user sends messages...
	sends message via web socket
	server receives message
	stores the message to the database
		in the send messages method in models.py add additional parameters to select out those users who are present in the room, so that their read status can be checked at the moment of message copy creation

unread message count 
	user joins a room 
	receives previous messages via html 
	via web socket, add the user to the channel group and mark the join time
		how to remove the user from the room once the user leaves the room?
			when the user clicks the "X" button to leave the room, notify the server via websocket that the user has left the room.
			how does routing work?

		when a member in the group sends message, subtract the number of users present in the room from total number of members before pushing the message to active members in the room
			when generating copies of the message, how do we mark the read status based on the active member?

	mark all messages in the room as read for the user
	if read status changes, notify all the active members of the changes in read status number count
		resend all messages to active members with the change in unread count
		OR
		just notify the clients to reduce read count by one 

implement these later
	loading more chat when scrolling up 
	unread message count
	SPA


overall state management schema 


when entering a room for the first time, connect via html <= websocket because have to send updated read-count to all users 
	general update with websocket connection established when a user first logs in
		client receives...
		{
			group_id:
			sender_id:
			sender_name:
			message:
			time: 
			unread_count: 
		}
	enters a room
		receives all messages via html
		if incoming message belongs to the room, append new messages 
			current_messages = [
				{
					group_id:
					sender_id:
					sender_name:
					message:
					time:
					unread count:
				}
			]

			new_messages = [
				{
					group_id:
					sender_id:
					sender_name:
					message:
					time:
					unread count:
				}
			]
		render items in html format 

new group vs existing group
	new group
		temp url
		request url: create_group
		request (websocket) <= maybe html ? 
			{
				group_name: none, 
				members: [member1, member2], 
				message: 'hi!'
			}

		server 
			create a new group
			add active members to the channel group for the room <= how?
				url: 
				if member in active_members
					channel.group_add(group_id, member)
		
		response 
			{
				group_id: 8,
				message: 'hi!
			}

	existing
		request url: group/{group_id}
		request
			{

			}

checkbox
	how to style
	how to detect which ones are selected using javascript 

firstly finish the project without websocket part. implement websocket in the last stage.
	functionality first, then design 

rerendering when state change
	instead rerendering all chat html elements all over again, only change relevant part such as read status and new messages 

updating read count via websocket (worry about read status later)
	happen when a member enters a room 
	from the database, check if the last message's read status is checked
		if checked, no further action
		else, 
			loop through the messages and change the status to checked until encountering a checked message 
			for every active member in the room, update the messages
	

establish web socket server


websocket
	connect
		accept user and add the user's channel address for every group the user is part of
	disconnect
		remove user from all groups
	receive
		{
			'room_id': '1', 
			'content': 'hello', 
		}
			user.send_message(room_id, content)
			channel.sendgroup('room-1', {'type': 'chat_messasge', 'content': 'hello'})
	
	chat_message(self, event):
		message = event['message']
		sender = event['sender']

		self.sent(text_date=json.dumps({
			'message': message, 
			'sender': sender,
			
		}))
	



Client side state management
	friends = [friend1, friend2, friend3, etc..]
	chats = [
		{
			room: 'friend1', 
			latest_message: 'hi!', 
			time: 'xxxxxxxx',
			unread_count: 5
		},
		{

		}
	]

create  model based on the tutorial (X)
	create models 
	require login with decorator

when a user logs in, add the user's channel name to every chat_group he belongs to 

don't worry about SPA for now vs load each chat room as a div block 
	can routing be done the way I made the SPA work for the email project? 
	
client notifies via websocket only when
	sending message
	reading message 



how to send message to individual user?	

channel name 
	can consumers of different classes interact via channel name? i think so.... 

chat scenario
	case 1: A sends message and B is present in the room 
	case 2: A sends a message and B is not in the group but online
		server receives message
		for each user in the room, check if the user is online 
			if online

			if the user is in the room, 
			else 
	



consummer attributes
	room_name
	view_mode = PC or mobile 


for general update, use for loop to add all the client's chat group in the channel layer group 
	desktop mode: on the front end side, if the received messsage belongs to currently active chat, update
	{desktop: location: desktop_vies: }
	how to deal with desktop and mobile version just using front end? 
		the server should know the client's whearabout to update the read-status
			option 1: notify the server whenever message is checked after receiving
				if incoming message does not belong to the current chat, ignore(if mobile)
				else notify the server and mark all the messages read in the group for the user 
			option 2: make two different versions, desktop and mobile versions, and whenever the viewport 
			or active chat changes let the server know 

make a mini channel project that does real time chat messaging

how does the socket server manages session data set? user authentication? interact with database?  

desktop view vs mobile view
	for desktop simultaneous update on the current chat group and updates on other rooms
		when changed to desktop mode, notify the server 
		from the server side, treat desktop user and mobile user differently 
		
		online_user_general = []
		online_user_group_11 = []


real time update	
	read status
		when a use joins a room 
			establish socket connection 
			mark the messages read
			push to other users the updated read status 
	new message 

Web socket usages
	real time text conversation between users
	for other rooms, update the number of unchecked messages and the latest message 
		for all rooms, connect via socket
			socket for each room or one socket for one user for general update? 

make small projects that test react DRF Channel separately, especially DRF

Django react usages
	make a group
		add a member
		create a message

	group: create, list
	messages: create, list
	users: create, list 


React, Django, Django-rest, Channel, integration?

Django DRF integration 
	https://www.oddbird.net/2018/12/12/channels-and-drf/

Django Channel 
	https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django

Django Channel boardgame example
	https://blog.logrocket.com/django-channels-and-websockets/

how to use router?

how to use socket.io for updating new message in every room a user is part of 

useref, useeffect 

Django react integration 
	https://www.digitalocean.com/community/tutorials/build-a-to-do-application-using-django-and-react

sort copy by message like..
	class Meta:
    	ordering = ['user__username']

4. self.request.user

multi users accessing database simultaneously 
client side routing
web socket
CORS
authentication
serializer api 

Add back button 

create a new room page
	a new html file vs display switching

empty room	
	if group name is not blank
		show on list of chats
	else
		don't show 

multiple user accessing database at a same time, how to prevent these problems? 

create a new room when a new friend is clicked on 
send delete request when there is no message 

html
	friends
	chat groups
	chat room
	create a new chat room 
		more than 2 people selection
		title submission 

new chat > new group chat (add more than 1 person) > add title

scroll to top to load more messages 

style scrollbar 

chat room
	chats start from the bottom
	scroolable 

fix the form location 	

time displayer(comparison, now) 
	same year
		day mon year
	samd week
		xxxday
	same day 
		xx:xx am
	same hour 
		just now

apply csrf exemption for now

onsubmit{
	e.target.preventdefault()
	temporarily update the sent message
	send_message()

}

function send_message () {

	{content: }

	fetch(url, method: push)
	.then(response => response.json())
	.then((messages) => {
		message_state = messages; 
		})
	.catch((error) => {
	console.error(error.message);
	delete the temporarily rendered sent message
	})
}

function update_rooms() {
	fetch(url)
	.then(
	
	
	[{room_id: ,room_name: , latest_message: ,unread_count: ,members: [user1, user2, user3] }]
	
}


function update_friends() {
	
	[{username: ,chat_exits: T/F}]
}

function create_group() {
	fetch(method: push, body:{members:[] ,content: }
}

function temp_room {
	1. redirect to created room, new url
	2. just change the state variable of the room 
}

page_create_group (
add members, 
new message)

friend_checkbox (
	for friend in friends
		
)


function render_messages() {
	for (message in messages) {
		document.createelement('div')
	
	}
}

<div>
	<div class = "content sent">
		content
	</div>
	<div class = "others">
		<div>
			sender
		</div>
		<div>
			time
		</div>
	</div>
</div>


function render_friends() {
	
}

function render_rooms() {

}

if prev_stat === new_state
	pass
else 
	prev_state = new_state
	render(messages or friends or rooms) 




successful request sends status 200

prevent default 

	send message
		temporary sent message object on client side which gets replaced once messages are loaded from the server 
	update new message in the server
	retrieves unread messages from the server
	mark retrieved messages read 

	fetch(request).then(response ....).then(response...) 

update friend list periodically 

django template for js files 

client state management
	friends = [{friend_username: ,room_id: None if none,}]
	room = {room_id: ,friend_usernames: ['1', '2'], messages: [sender: ,time_sent: ,content: ,unread_count: ]}


possible hacks using JS console 
	modify room id
	modify friends list in a group 
	always check if the rooms belong to the user sending requests 




how to distinguish a new room from existing room 
	server side check 
		if a room exists between the two people, just add a new message to the group
		otherwise, create a new group 

when click a friend 
	open a new chat group
		if a message sent
			update room state
			
			server side:
				check if the room already exists
				if its a new one, create a new group
				add messages to the group
				send back the room info and messages 
		
	or
	open existing chat
		for room in rooms
			if room.members.len == 2
				for member in members
					if member = friend
		or server sends the group title separately for each room 
		or include as id 
layout
	chat_room
		header: username, logout
		tabs: friends, chats
		list: div blocks 
		


get notification from client so that new messages are successfully updated 

def update_a(update_all, a):
	update_all(a)

retrieve all messages(room=room_id)
group by room, and then order by time 


table joining in django 

room updating
	user to rooms through Many_to_Many relationship 
		room(user_id)
	for each room, retrieve the latest message
		message(room=room_id)
	between the rooms, compare the last sent time
	sort by the last sent time 

	room join messages join Message_copy 

	how to join many to many 

	room(filter by user) 
	messages (filter by room) 
	copy (filter by message and user)

	USER
	id	username

	ROOM
	id	room_name 

	ROOM_USER
	id	room_id		user_id

	MESSAGES
	id	content		sender_id		time 

	COPY
	id	message_id	check_status	user_id  

	RESULT
		COPY_user_id COPY_message_id	MESSAGE_id	MESSAGE_sender_id	MESSAGE_time	MESSAGE_content	MESSAGE_room_id	room_id 		
		
					
		app_name = "tasks"
		<form action="{% url 'tasks:add' %}" method="post">


login page review
Django authentication wrapper
log in required


Django React integration 

pages:
	login
	register
	index
	room
	add friend


routes:
	get messages within a room
		url(update_room) room_id
		get {room, user}
		
	get new messages count
		per room, receive: time, last message, sender, unread messages 
		url(update_all)
		get
		
		[{room_id: ,room_name: ,unread_message_count: }, last_message:] <=sorted by time 
		
		rooms = user.chat_room.all <=filter by last update time
			
		for room in rooms:
			last_message = room.messages.all().sort_by()
			
			{'room': room, 'last_message': {'time':, 'sender': ,'content': ,'unread_count: ';}}
			
			[{'room': ,'last_message': }, {'room': ,'last_message': },]
			
		for room in rooms:
			last_message = room.messages.all() < get the most recent item
			
			copy = last_message.original_of.filter(user = request.user) 
			
			message in messages:
				if message.original_of.filter(user = request.user).checked = false:
					unread_count += 1
				else:
					break 
					
			
		
	send new messages to a group
		url(send_message) room_id, content
		post
		
	send a friend request
		url(add_friend)
		post
		
	send room creation request 
		url(create_group)
		post


csrf

review get, post, put methods
	google copy html project 

room and message sorting 
time zone modification
	break down into pieces for compatibility between python and js

create a python file that simulates request from the client side
	when a user first logs in, send a periodic not_in_room request just to update the number of unread messages
		send entire chat room and message data
	
	every 5 seconds	
		retrieve all unread messages
		group them by room 
			room sorting (the room with the most recent message on top)
			user => room => messages
			
	periodic notification to the server when a user is in a room (if in a room)
		url(/room_id/)
		{current_room_id: 1}
		update message checked state in the room 
		
		receives:
			[{content:, time}]
	
	send message to a group request
		url(/room_id?content='hello')
		{content: "hello", room_id: 1}
		
	periodic request when not in a room	
		url(/check/not_in_room)
		
		receives: 
			[{room_id: ,room_name: ,unread_message_count: }, last_message:] <=sorted
	
	
	request timing 
		periodic
			not_in_a_room	
			in_a_room 
		instant
			send_message
			logs_in
			enters_a_room
		 
	request types:
		not_in_a_room:
			sends: url()
				{user: Minkyu, in_room: False }
			receives:
				[{room_id: , room_name: , lates_message_content: , lates_message_time: , unread_message_count: }]
				
				[[{MessageCopy}, sender:, time, content: ]]
				{MessageCopy} = {owner: ,is_checked: }
		in_a_room:
			sends: url()
				{user: Minkyu, room_id: 1}
			receives:
				[[{MessageCopy}, sender:, time, content: ]]
				{MessageCopy} = {owner: ,is_checked: }			
			send_message: url()
				sends:
					{user: Minkyu, room_id: 1, message: }
				receives (request for a new message right after):
					same as 

add additional people to a group 

creat room only after first message is sent
	client side: 
		make a message mandatory when creating a room
		keep an empty group only on the client side temporarily  
checked = true for message sender
add all functions as User methods 
	add_friend, create_group, send_message, enter_room 	
change "original_of" related name

sending message to clients
	original Message object AND its copy 

looping through QuerySet, convert the set to a list

prevent adding self to friend

shell:
	load chat_app.models
	load functions from views.py

open a group
add people(friends)
create a message 
	only create room (or make the room appear to others) when a first message is sent
		client side: 
			maka a message a mandatory field when creating a room
			keep an empty group only on the client side temporarily 
		add boolean active field to the room
		only query rooms with at least one message in a room
	clinet only submits if a message is not empty
	attach to the room and sender
	make copies of the message
		link to the original message and members

client:
	logs in
	add friends
	open a group
	add people to the group
	
two pages (single page)
	friends
	chat roomm




review lecture note on custom User model setting



make friends symmetrical, but send a request first  

Class Meta.ordering 
	apply to messages in a group (are contents in join table ordered?)

Many_to_Many schecma <= join table 

should the entire chat history retrieved everytime a user enters a group chat?
	client side:
		based on the pk of the latest message

review put method so that page does not have to be refreshed upon submission

unread_count(unread by # person/people):
	new member joins so that the starting unread_count changes
		a new member does not get access to previous messages, so the total number of copies of a message remains unchanged 
		
	create a new message for each recipient?
		make an id_not_unique(or id_copies) attribute to group copies of every original message created for each recipient. id_not_unique should be equal to the pk of the original message <= ForeignKey 
		for every sent message, check the number of copies that have been read and report 
			report the read number 

	

	message query timing (for each user, only if the user himself/herself is logged in)
		every 5 seconds: 
			if the user is not in the room: only receieve number of new messages for each room. check for a new message via get method)
			if the user is present in the room: check for new messages AND update the read status (user last present attribute maybe) 
		everytime a user enters the room: update the read count via put method to avoid refreshing the page
		
			
	read_by attributes
		each recipient that has entered the room and read the message 
			from the client side, how are the read and unread messages distinquished 
			
	example case sequence:
		A creates a new room with A, B, C
			the room gets added to each user's model attribute
		A sends a new message to B and C in the group chat
			a new message object is created, total of three copies





then the message is added to the room, and the server notifies the members
	flow(Room => Message => Copied_Message) 
		align messages in reverse choronological order, and for each message look through copied_messages to check the read status of the copy that the user is recipient of. keep checking the original message until read message is found. 

	A(sender): A is the sender so the most recent message is read. Client takes no further action
		
	B(receiver, not in the room): The server report the total count of unread messages that belongs to the group. And client displays the number 
	
	C(receiver, in the room): 

			the id of the original message is added to the room's attribute 
				the unread_count should be 2 at this point
			
		
		request sent from B and C for an update on new messages and the server responds
			client notifies the server the id_copies of the most recent message it has downloaded so that only new messages need to be sent 
			
			https://docs.djangoproject.com/en/3.2/ref/models/querysets/#range
			notify the server the last message the client has so that only new messages from that point on need to be sent to the client, as opposed to sending the entire conversation history on the group chat. 
			
			the server queries new messages within the group chat and send the data to the client
		

		
		
		if there are more chats 



url in django
	how js files are referenced in layout.html 
	how urls are specified in post method in html files

most recent chat move to the top


group chat 
	database how
	create a chat room hash key using the ID key of the users
		make a unique ID by sorting in some order (ex. if there are three users with id 64, 4, 1005, then the chat room id would be room_4_64_1005 
			hash table in sql database??
		<=just used MtoM relationship between users and rooms (is it faster than just looking up for the hash key when retrieving data from the user?)
			https://docs.djangoproject.com/en/3.2/topics/db/examples/many_to_many/

Chatting application

hopefully no need to log in
	if login needed: 
		ID: visitor 
		PW:	123

similar to kakao talk
add user with ID

tabs:
	friends
	chat history 

Model
	user:
		friend list

	chat:
		sender
		receiver
		message
		Date
		Time 

chat query cases
	case 1: only received

	case 2: only sent

	case 3: sent and received

	Duplicates 
		for example, there are 3 users, userA, userB, userC, userD
		
		case 3: between userA and userB
		[(HI, ),( ,nice to meet you),(thanks for replying, )]

		case 2: between userA and userC
		[(Hi, ),(are you ther?, ),(guess no one is ther, )]
		
		case 1: between userA and userD
		[( ,greeting from D), (,still aleep?)]

	for userA, to query all conversations without duplicates...
		if (sender==userA AND receiver==userB) OR (serder==userB AND receiver==userA) 

	what about group chat?
	
FINISHED:

	function add_friend(user)

	function create_group(name, users)

	function send_message(sender, group)
	
	inherit model.User attribute and set username(blank=true)

	purpose of room
		1. quickly able to search for the chat room a user is a member of
		2. quickly query messages that belong to the chat room

	new member joins in a group chat
		hide previous conversation from the new member 
			filter by member join time, but not really necessary at this point 

how MtoM is manifested as a Django model?

	B enters the room, and for new messages,(checked until read message is reached), send the messages that have been newly checked to the server 
		client sends the id_copies of the most recent message is has downloaded
			just make all messages in the room read
			
message(sender = A, id = 1, content='hi')

message_copied(copy_of = 1, recipient = A, read = TRUE)
message_copied(copy_of = 1, recipient = B, read = False)
message_copied(copy_of = 1, recipient = C, read = False)